pipeline {
    agent any
    environment {
        REPO = "s10-blockchain-contract-sub2/S10P22C207"
    }
    stages {
        stage('Checkout') {
            steps {
//                 cleanWs()
                checkout scm
            }
        }
        stage("Build") {
            steps {
                dir("${env.WORKSPACE}/infra/nginx"){
                    sh "docker compose -p nginx-project build nginx"
                }
            }
        }
        stage('Prune old images'){
            steps{
                script{
                    sh "docker system prune -f --filter until=1h"
                }
            }
        }
        stage('Up') {
            steps {
                dir("${env.WORKSPACE}/infra/nginx"){
                    script {
                        try {
                            sh "docker-compose build --no-cache "
                            sh "docker-compose up -d"
                        } catch (Exception e) {
                        // 'docker compose up -d' 명령이 실패한 경우
                            echo "Failed to up. Starting 'docker compose start'..."
                            sh "docker stop nginx"
                            sh "docker-compose build --no-cache "
                            sh "docker-compose up -d"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: currentBuild.currentResult=='SUCCESS'?'good':'danger',
                        message: "빌드 ${currentBuild.currentResult}: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                        endpoint: 'https://meeting.ssafy.com/hooks/8656byf6wbn3mdns9ym35suhze',
                        channel: 'Jenkins'
                )
            }
        }
    }
}