def component = [
    utils: true,
    eureka: true,
    gateway: true,
    notification: true,
    payment: true,
    socon: true,
    user: true
]
pipeline {
    agent any
    environment {
        REPO = "s10-blockchain-contract-sub2/S10P22C207"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(
                    branches: [[name: 'develop']],
                    extensions: [submodule(parentCredentials: true, trackingSubmodules: true)],
                    userRemoteConfigs: [[credentialsId: 'github-access-token', url: 'https://github.com/boongbangsaurus/boongbang-settings']]
                )
            }
        }
        stage('Move .env File') {
            steps {
                script{
                    sh 'cp secure-settings/back/.env .env'
                    component.each { entry ->
                        if (entry.value) {
                            sh "cp secure-settings/back/${entry.key}/gradle.properties backend/${entry.key}/gradle.properties"
                        }
                        if (entry.key != "utils"){
                            sh "mkdir -p backend/${entry.key}/src/resources"
                            // find 명령어를 사용하여 .yml 파일을 찾고, 각 파일에 대해 cp 명령어를 실행
                            sh "find secure-settings/back/${entry.key} -name '*.yml' -exec cp {} backend/${entry.key}/src/resources \\;"
                            // 동일한 디렉토리 내 모든 .yml 파일을 복사
                            sh "find secure-settings/back -maxdepth 1 -name '*.yml' -exec cp {} backend/${entry.key}/src/resources \\;"
                        }
                    }
                }
            }
        }
        stage('Setup Environment') {
            steps {
                script{
                    component.each { entry ->
                        if (entry.value) {
                            sh "chmod +x ./backend/${entry.key}/gradlew"
                        }
                    }
                }
            }
        }
        stage("Build") {
            steps {
                dir("backend"){
                    script {
                        component.each { entry ->
                            if (entry.value) {
                                sh "docker-compose -p backend-project build --no-cache ${entry.key.toLowerCase()}"
                            }
                        }
                    }
                }
            }
        }
        stage('Up') {
            steps {
                dir("backend"){
                    script {
                        component.each{ entry ->
                            if(entry.value){
                                def var = entry.key
                                try {
                                    sh "docker-compose up -p backend-project -d ${var.toLowerCase()}"
                                } catch (Exception e) {
                                    // 'docker-compose up -d' 명령이 실패한 경우
                                    echo "Failed to up. Starting 'docker-compose start'..."
                                    sh "docker-compose -p backend-project restart ${var.toLowerCase()}"
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Prune old images'){
            steps{
                script{
                    sh "yes | docker system prune --filter until=1h"
                }
            }
        }
    }
    post {
        always {
             script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: currentBuild.currentResult=='SUCCESS'?'good':'danger',
                    message: "빌드 ${currentBuild.currentResult}: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                    endpoint: 'https://meeting.ssafy.com/hooks/8656byf6wbn3mdns9ym35suhze',
                    channel: 'Jenkins'
                )
            }
        }
    }

}
