pipeline {
    agent any
    environment {
        REPO = "s10-blockchain-contract-sub2/S10P22C207"
    }
    stages {
        stage('Checkout Main Repo') {
            steps {
                checkout scm
            }
        }

        stage('Init & Update Submodules with Custom Credentials') {
            steps {
                script {
                    // 서브모듈 크레덴셜을 설정
                    withCredentials([usernamePassword(credentialsId: 'github-access-token', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh "git submodule init"
                        sh "git config submodule.secure-settings.url https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/boongbangsaurus/boongbang-settings.git"
                        sh "git submodule update --recursive"
                        sh "cd secure-settings && git checkout release "
                    }
                }
            }
        }
        stage('Move .env File') {
            steps {
                script{
                    sh 'cp ../environments/.env backend/notification/.env'
                    sh 'cp ../environments/gradle.properties backend/notification/gradle.properties'
                    sh "mkdir -p backend/notification/src/main/resources"
                    // find 명령어를 사용하여 .yml 파일을  찾고, 각 파일에 대해 cp 명령어를 실행
                    sh "cp secure-settings/back/notification/notification-service-default.yml backend/notification/src/main/resources/application.yml"
                }
            }
        }
        stage('Setup Environment') {
            steps {
                script{
                    sh "chmod +x ./backend/notification/gradlew"
                }
            }
        }
        stage("Build & Run") {
            steps {
                dir("backend/notification"){
                    script {
                        try {
                            sh "docker-compose -p notification-project build --no-cache"
                            sh "docker-compose -p notification-project up -d"
                        }catch (Exception e) {
                            sh "docker stop notification"
                            sh "docker-compose -p notification-project build --no-cache"
                            sh "docker-compose -p notification-project up -d"
                        }
                    }
                }
            }
        }
        stage('Prune old images'){
            steps{
                script{
                    sh "yes | docker system prune --filter until=1h"
                }
            }
        }
    }
    post {
        always {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: currentBuild.currentResult=='SUCCESS'?'good':'danger',
                        message: "빌드 ${currentBuild.currentResult}: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                        endpoint: 'https://meeting.ssafy.com/hooks/8656byf6wbn3mdns9ym35suhze',
                        channel: 'Jenkins'
                )
            }
        }
    }
}
