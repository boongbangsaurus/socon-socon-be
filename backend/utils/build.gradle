
plugins {
    id 'java'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0-rc-2"
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'site.socon-socon'
version = '1.0.2'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar.enabled = false // 실행가능한 아카이브로 main-class 가 있는 모듈인경우
jar.enabled = true // PLAIN 으로 생성 실행이 불가능한 일반 아카이브

repositories {
    mavenCentral()
    maven {
        credentials(PasswordCredentials) {
            username = "${nexusUsername}"
            password = "${nexusPassword}"
        }
        url "${nexusUrl}/socon-group/"
        allowInsecureProtocol true
        // 가능한 경우 allowInsecureProtocol 제거하고 HTTPS 사용
    }
}

jar {
    archiveFileName = "${project.name}-${version}.jar"
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId group
            artifactId project.name
            version version
            artifact("build/libs/$project.name-$version" + ".jar") {
                extension 'jar'
            }
        }
    }
    repositories {
        maven {
            credentials(PasswordCredentials) {
                username = "${nexusUsername}"
                password = "${nexusPassword}"
            }
            def releasesRepoUrl = "${nexusUrl}/socon-release"
            def snapshotsRepoUrl = "${nexusUrl}/socon-snapshot"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            allowInsecureProtocol true
            // 가능한 경우 allowInsecureProtocol 제거하고 HTTPS 사용
        }
    }
}




dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

